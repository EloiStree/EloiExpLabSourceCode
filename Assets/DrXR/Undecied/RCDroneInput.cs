//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/DrXR/Undecied/RCDroneInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @RCDroneInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @RCDroneInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""RCDroneInput"",
    ""maps"": [
        {
            ""name"": ""DroneInput"",
            ""id"": ""3d57e489-9263-4cd4-ad41-f3222e696efa"",
            ""actions"": [
                {
                    ""name"": ""YawLeftRightHorizontal"",
                    ""type"": ""Value"",
                    ""id"": ""61f0da92-afa3-4d5d-a7ef-a04e9e5bdcd0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ThrottleDowTop"",
                    ""type"": ""Value"",
                    ""id"": ""d47f2177-44c6-4844-8022-4173431e36d5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TiltBackFront"",
                    ""type"": ""Value"",
                    ""id"": ""b8ad15fb-0c16-4eae-8f16-a6bf370a350d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RollLeftRight"",
                    ""type"": ""Value"",
                    ""id"": ""56306e12-39d6-435a-878b-41ea73e352f3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""IsArmed"",
                    ""type"": ""Button"",
                    ""id"": ""4c894249-1d80-41b6-a4e7-f6c3fc3566c7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7b23e452-c492-44be-a1ea-cc44fd7fc542"",
                    ""path"": ""<XInputController>/leftStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""YawLeftRightHorizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4e178dac-5215-4f84-b16c-2f1992e68d46"",
                    ""path"": ""<XInputController>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": ""Invert"",
                    ""groups"": """",
                    ""action"": ""YawLeftRightHorizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4a138e22-eac4-41ee-bb08-23341b7dc3c6"",
                    ""path"": ""<XInputController>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""YawLeftRightHorizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""66066f3f-9dd1-4bfa-9aea-b38ac479a828"",
                    ""path"": ""<XInputController>/leftStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThrottleDowTop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e6781cf9-cf72-4149-ae8e-3adf2c0cae3f"",
                    ""path"": ""<XInputController>/rightStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TiltBackFront"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9bae8018-0f28-4c09-856e-729df080ae20"",
                    ""path"": ""<XInputController>/rightStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RollLeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""de474de4-0271-470c-b24f-e34c2cb6b8ec"",
                    ""path"": ""<XInputController>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""IsArmed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DroneInput
        m_DroneInput = asset.FindActionMap("DroneInput", throwIfNotFound: true);
        m_DroneInput_YawLeftRightHorizontal = m_DroneInput.FindAction("YawLeftRightHorizontal", throwIfNotFound: true);
        m_DroneInput_ThrottleDowTop = m_DroneInput.FindAction("ThrottleDowTop", throwIfNotFound: true);
        m_DroneInput_TiltBackFront = m_DroneInput.FindAction("TiltBackFront", throwIfNotFound: true);
        m_DroneInput_RollLeftRight = m_DroneInput.FindAction("RollLeftRight", throwIfNotFound: true);
        m_DroneInput_IsArmed = m_DroneInput.FindAction("IsArmed", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DroneInput
    private readonly InputActionMap m_DroneInput;
    private List<IDroneInputActions> m_DroneInputActionsCallbackInterfaces = new List<IDroneInputActions>();
    private readonly InputAction m_DroneInput_YawLeftRightHorizontal;
    private readonly InputAction m_DroneInput_ThrottleDowTop;
    private readonly InputAction m_DroneInput_TiltBackFront;
    private readonly InputAction m_DroneInput_RollLeftRight;
    private readonly InputAction m_DroneInput_IsArmed;
    public struct DroneInputActions
    {
        private @RCDroneInput m_Wrapper;
        public DroneInputActions(@RCDroneInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @YawLeftRightHorizontal => m_Wrapper.m_DroneInput_YawLeftRightHorizontal;
        public InputAction @ThrottleDowTop => m_Wrapper.m_DroneInput_ThrottleDowTop;
        public InputAction @TiltBackFront => m_Wrapper.m_DroneInput_TiltBackFront;
        public InputAction @RollLeftRight => m_Wrapper.m_DroneInput_RollLeftRight;
        public InputAction @IsArmed => m_Wrapper.m_DroneInput_IsArmed;
        public InputActionMap Get() { return m_Wrapper.m_DroneInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DroneInputActions set) { return set.Get(); }
        public void AddCallbacks(IDroneInputActions instance)
        {
            if (instance == null || m_Wrapper.m_DroneInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DroneInputActionsCallbackInterfaces.Add(instance);
            @YawLeftRightHorizontal.started += instance.OnYawLeftRightHorizontal;
            @YawLeftRightHorizontal.performed += instance.OnYawLeftRightHorizontal;
            @YawLeftRightHorizontal.canceled += instance.OnYawLeftRightHorizontal;
            @ThrottleDowTop.started += instance.OnThrottleDowTop;
            @ThrottleDowTop.performed += instance.OnThrottleDowTop;
            @ThrottleDowTop.canceled += instance.OnThrottleDowTop;
            @TiltBackFront.started += instance.OnTiltBackFront;
            @TiltBackFront.performed += instance.OnTiltBackFront;
            @TiltBackFront.canceled += instance.OnTiltBackFront;
            @RollLeftRight.started += instance.OnRollLeftRight;
            @RollLeftRight.performed += instance.OnRollLeftRight;
            @RollLeftRight.canceled += instance.OnRollLeftRight;
            @IsArmed.started += instance.OnIsArmed;
            @IsArmed.performed += instance.OnIsArmed;
            @IsArmed.canceled += instance.OnIsArmed;
        }

        private void UnregisterCallbacks(IDroneInputActions instance)
        {
            @YawLeftRightHorizontal.started -= instance.OnYawLeftRightHorizontal;
            @YawLeftRightHorizontal.performed -= instance.OnYawLeftRightHorizontal;
            @YawLeftRightHorizontal.canceled -= instance.OnYawLeftRightHorizontal;
            @ThrottleDowTop.started -= instance.OnThrottleDowTop;
            @ThrottleDowTop.performed -= instance.OnThrottleDowTop;
            @ThrottleDowTop.canceled -= instance.OnThrottleDowTop;
            @TiltBackFront.started -= instance.OnTiltBackFront;
            @TiltBackFront.performed -= instance.OnTiltBackFront;
            @TiltBackFront.canceled -= instance.OnTiltBackFront;
            @RollLeftRight.started -= instance.OnRollLeftRight;
            @RollLeftRight.performed -= instance.OnRollLeftRight;
            @RollLeftRight.canceled -= instance.OnRollLeftRight;
            @IsArmed.started -= instance.OnIsArmed;
            @IsArmed.performed -= instance.OnIsArmed;
            @IsArmed.canceled -= instance.OnIsArmed;
        }

        public void RemoveCallbacks(IDroneInputActions instance)
        {
            if (m_Wrapper.m_DroneInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDroneInputActions instance)
        {
            foreach (var item in m_Wrapper.m_DroneInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DroneInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DroneInputActions @DroneInput => new DroneInputActions(this);
    public interface IDroneInputActions
    {
        void OnYawLeftRightHorizontal(InputAction.CallbackContext context);
        void OnThrottleDowTop(InputAction.CallbackContext context);
        void OnTiltBackFront(InputAction.CallbackContext context);
        void OnRollLeftRight(InputAction.CallbackContext context);
        void OnIsArmed(InputAction.CallbackContext context);
    }
}
