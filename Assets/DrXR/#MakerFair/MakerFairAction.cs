//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/DrXR/#MakerFair/MakerFairAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MakerFairAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MakerFairAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MakerFairAction"",
    ""maps"": [
        {
            ""name"": ""MakerFair"",
            ""id"": ""e8496913-037f-45fc-9ec4-3259d0168f6c"",
            ""actions"": [
                {
                    ""name"": ""SetDroneTello"",
                    ""type"": ""Button"",
                    ""id"": ""97c7ec32-0efa-43e2-99f1-a7fac680f35f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SetDroneFPV"",
                    ""type"": ""Button"",
                    ""id"": ""9106ea73-e92f-4fce-ba0e-57d978e5710d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchGameMode"",
                    ""type"": ""Button"",
                    ""id"": ""af095327-48ac-430b-8387-f48fc34bc833"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchDroneType"",
                    ""type"": ""Button"",
                    ""id"": ""56218560-b3aa-4db6-b625-c441032fed9c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8d68078d-2503-4247-baaf-c40be0b2c9d9"",
                    ""path"": ""<XRInputV1::Oculus::OculusTouchControllerOpenXR>{RightHand}/primarybutton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SetDroneTello"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""555d44da-fe79-44c3-b7f9-b736191263d6"",
                    ""path"": ""<XRController>{RightHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SetDroneTello"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4ff60411-184e-4ffb-a718-0b24f64b4ad2"",
                    ""path"": ""<XRInputV1::Oculus::OculusTouchControllerOpenXR>{RightHand}/secondarybutton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SetDroneFPV"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""78696e00-6ee0-497c-9785-49abc473b678"",
                    ""path"": ""<XRController>{RightHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SetDroneFPV"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3509abd0-1e98-4392-bb8e-18662069d2dc"",
                    ""path"": ""<XRInputV1::Oculus::OculusTouchControllerOpenXR>{LeftHand}/primarybutton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchGameMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d7da1890-99e5-4a38-906d-9b0e878c128d"",
                    ""path"": ""<XRController>{LeftHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchGameMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb3a9e06-e822-4275-9093-05d302e47b04"",
                    ""path"": ""<XRInputV1::Oculus::OculusTouchControllerOpenXR>{LeftHand}/secondarybutton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchDroneType"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""35c07956-c8b0-436f-bcc5-9c8c8b499f34"",
                    ""path"": ""<XRController>{LeftHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchDroneType"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""New control scheme"",
            ""bindingGroup"": ""New control scheme"",
            ""devices"": []
        }
    ]
}");
        // MakerFair
        m_MakerFair = asset.FindActionMap("MakerFair", throwIfNotFound: true);
        m_MakerFair_SetDroneTello = m_MakerFair.FindAction("SetDroneTello", throwIfNotFound: true);
        m_MakerFair_SetDroneFPV = m_MakerFair.FindAction("SetDroneFPV", throwIfNotFound: true);
        m_MakerFair_SwitchGameMode = m_MakerFair.FindAction("SwitchGameMode", throwIfNotFound: true);
        m_MakerFair_SwitchDroneType = m_MakerFair.FindAction("SwitchDroneType", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MakerFair
    private readonly InputActionMap m_MakerFair;
    private List<IMakerFairActions> m_MakerFairActionsCallbackInterfaces = new List<IMakerFairActions>();
    private readonly InputAction m_MakerFair_SetDroneTello;
    private readonly InputAction m_MakerFair_SetDroneFPV;
    private readonly InputAction m_MakerFair_SwitchGameMode;
    private readonly InputAction m_MakerFair_SwitchDroneType;
    public struct MakerFairActions
    {
        private @MakerFairAction m_Wrapper;
        public MakerFairActions(@MakerFairAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @SetDroneTello => m_Wrapper.m_MakerFair_SetDroneTello;
        public InputAction @SetDroneFPV => m_Wrapper.m_MakerFair_SetDroneFPV;
        public InputAction @SwitchGameMode => m_Wrapper.m_MakerFair_SwitchGameMode;
        public InputAction @SwitchDroneType => m_Wrapper.m_MakerFair_SwitchDroneType;
        public InputActionMap Get() { return m_Wrapper.m_MakerFair; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MakerFairActions set) { return set.Get(); }
        public void AddCallbacks(IMakerFairActions instance)
        {
            if (instance == null || m_Wrapper.m_MakerFairActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MakerFairActionsCallbackInterfaces.Add(instance);
            @SetDroneTello.started += instance.OnSetDroneTello;
            @SetDroneTello.performed += instance.OnSetDroneTello;
            @SetDroneTello.canceled += instance.OnSetDroneTello;
            @SetDroneFPV.started += instance.OnSetDroneFPV;
            @SetDroneFPV.performed += instance.OnSetDroneFPV;
            @SetDroneFPV.canceled += instance.OnSetDroneFPV;
            @SwitchGameMode.started += instance.OnSwitchGameMode;
            @SwitchGameMode.performed += instance.OnSwitchGameMode;
            @SwitchGameMode.canceled += instance.OnSwitchGameMode;
            @SwitchDroneType.started += instance.OnSwitchDroneType;
            @SwitchDroneType.performed += instance.OnSwitchDroneType;
            @SwitchDroneType.canceled += instance.OnSwitchDroneType;
        }

        private void UnregisterCallbacks(IMakerFairActions instance)
        {
            @SetDroneTello.started -= instance.OnSetDroneTello;
            @SetDroneTello.performed -= instance.OnSetDroneTello;
            @SetDroneTello.canceled -= instance.OnSetDroneTello;
            @SetDroneFPV.started -= instance.OnSetDroneFPV;
            @SetDroneFPV.performed -= instance.OnSetDroneFPV;
            @SetDroneFPV.canceled -= instance.OnSetDroneFPV;
            @SwitchGameMode.started -= instance.OnSwitchGameMode;
            @SwitchGameMode.performed -= instance.OnSwitchGameMode;
            @SwitchGameMode.canceled -= instance.OnSwitchGameMode;
            @SwitchDroneType.started -= instance.OnSwitchDroneType;
            @SwitchDroneType.performed -= instance.OnSwitchDroneType;
            @SwitchDroneType.canceled -= instance.OnSwitchDroneType;
        }

        public void RemoveCallbacks(IMakerFairActions instance)
        {
            if (m_Wrapper.m_MakerFairActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMakerFairActions instance)
        {
            foreach (var item in m_Wrapper.m_MakerFairActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MakerFairActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MakerFairActions @MakerFair => new MakerFairActions(this);
    private int m_NewcontrolschemeSchemeIndex = -1;
    public InputControlScheme NewcontrolschemeScheme
    {
        get
        {
            if (m_NewcontrolschemeSchemeIndex == -1) m_NewcontrolschemeSchemeIndex = asset.FindControlSchemeIndex("New control scheme");
            return asset.controlSchemes[m_NewcontrolschemeSchemeIndex];
        }
    }
    public interface IMakerFairActions
    {
        void OnSetDroneTello(InputAction.CallbackContext context);
        void OnSetDroneFPV(InputAction.CallbackContext context);
        void OnSwitchGameMode(InputAction.CallbackContext context);
        void OnSwitchDroneType(InputAction.CallbackContext context);
    }
}
