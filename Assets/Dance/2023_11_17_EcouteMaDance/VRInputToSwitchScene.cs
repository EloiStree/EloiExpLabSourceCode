//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Dance/2023_11_17_EcouteMaDance/VRInputToSwitchScene.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @VRInputToSwitchScene: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @VRInputToSwitchScene()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""VRInputToSwitchScene"",
    ""maps"": [
        {
            ""name"": ""DanceInput"",
            ""id"": ""7e828c32-086c-4e5c-a080-a210ef55d755"",
            ""actions"": [
                {
                    ""name"": ""Previous"",
                    ""type"": ""Button"",
                    ""id"": ""a4cb2a18-e34f-4b2d-a44b-ddb4e2ed6126"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Next"",
                    ""type"": ""Button"",
                    ""id"": ""bae82d23-01fa-4a25-ba24-be2a11a84703"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""39a20aab-d281-46ba-982f-5bd387656d1e"",
                    ""path"": ""<XRController>{LeftHand}/{TriggerButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Previous"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dd0be733-d960-4ab3-8c65-defa4fe65b88"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Previous"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d79f330a-81f7-4f8e-b552-a5981c13248d"",
                    ""path"": ""<XRController>{LeftHand}/{PrimaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Previous"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2aa7e1bb-96cd-4c3e-9e9f-65cba6580e28"",
                    ""path"": ""<XRController>{LeftHand}/{SecondaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Previous"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6893e94f-8327-4c9f-b2df-a43f93acd1fd"",
                    ""path"": ""<XRController>{RightHand}/{TriggerButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c0b39a7b-ee35-423d-8eb0-f4e335a1eb1c"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""542ea5b8-cf84-4646-9c70-8b9fd2607668"",
                    ""path"": ""<XRController>{RightHand}/{SecondaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d1e2db4-2622-4680-b9fb-47601443abdc"",
                    ""path"": ""<XRController>{RightHand}/{PrimaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DanceInput
        m_DanceInput = asset.FindActionMap("DanceInput", throwIfNotFound: true);
        m_DanceInput_Previous = m_DanceInput.FindAction("Previous", throwIfNotFound: true);
        m_DanceInput_Next = m_DanceInput.FindAction("Next", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DanceInput
    private readonly InputActionMap m_DanceInput;
    private List<IDanceInputActions> m_DanceInputActionsCallbackInterfaces = new List<IDanceInputActions>();
    private readonly InputAction m_DanceInput_Previous;
    private readonly InputAction m_DanceInput_Next;
    public struct DanceInputActions
    {
        private @VRInputToSwitchScene m_Wrapper;
        public DanceInputActions(@VRInputToSwitchScene wrapper) { m_Wrapper = wrapper; }
        public InputAction @Previous => m_Wrapper.m_DanceInput_Previous;
        public InputAction @Next => m_Wrapper.m_DanceInput_Next;
        public InputActionMap Get() { return m_Wrapper.m_DanceInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DanceInputActions set) { return set.Get(); }
        public void AddCallbacks(IDanceInputActions instance)
        {
            if (instance == null || m_Wrapper.m_DanceInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DanceInputActionsCallbackInterfaces.Add(instance);
            @Previous.started += instance.OnPrevious;
            @Previous.performed += instance.OnPrevious;
            @Previous.canceled += instance.OnPrevious;
            @Next.started += instance.OnNext;
            @Next.performed += instance.OnNext;
            @Next.canceled += instance.OnNext;
        }

        private void UnregisterCallbacks(IDanceInputActions instance)
        {
            @Previous.started -= instance.OnPrevious;
            @Previous.performed -= instance.OnPrevious;
            @Previous.canceled -= instance.OnPrevious;
            @Next.started -= instance.OnNext;
            @Next.performed -= instance.OnNext;
            @Next.canceled -= instance.OnNext;
        }

        public void RemoveCallbacks(IDanceInputActions instance)
        {
            if (m_Wrapper.m_DanceInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDanceInputActions instance)
        {
            foreach (var item in m_Wrapper.m_DanceInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DanceInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DanceInputActions @DanceInput => new DanceInputActions(this);
    public interface IDanceInputActions
    {
        void OnPrevious(InputAction.CallbackContext context);
        void OnNext(InputAction.CallbackContext context);
    }
}
