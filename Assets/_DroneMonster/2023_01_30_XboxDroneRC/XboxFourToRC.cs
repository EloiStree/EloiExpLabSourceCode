//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_DroneMonster/2023_01_30_XboxDroneRC/XboxFourToRC.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @XboxFourToRC: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @XboxFourToRC()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""XboxFourToRC"",
    ""maps"": [
        {
            ""name"": ""DroneRC"",
            ""id"": ""0fa50478-2e00-4d09-9dbe-8c64516bcd15"",
            ""actions"": [
                {
                    ""name"": ""LeftRight"",
                    ""type"": ""Value"",
                    ""id"": ""5ba961cc-9f66-4a2d-b891-d35aa51150a9"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DownUp"",
                    ""type"": ""Value"",
                    ""id"": ""b4245d6f-eb81-42f3-860f-d71f15b9b37e"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""BackFront"",
                    ""type"": ""Value"",
                    ""id"": ""dc7bdf6c-9df9-4413-bc7d-3100d87eb4b2"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftRightRotation"",
                    ""type"": ""Value"",
                    ""id"": ""f325d4ff-ff05-4b0b-aea8-7e32a6773db6"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cc1ae61e-c3cc-42ac-995c-5efccac7c375"",
                    ""path"": ""<XInputController>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""321f3d98-3dd0-4190-ac67-030f8a990f7c"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DownUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""51ff5576-fbd5-4080-9d79-10d1f443dc8d"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BackFront"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fcef0322-3925-46a6-9249-f9512be57af5"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftRightRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DroneRC
        m_DroneRC = asset.FindActionMap("DroneRC", throwIfNotFound: true);
        m_DroneRC_LeftRight = m_DroneRC.FindAction("LeftRight", throwIfNotFound: true);
        m_DroneRC_DownUp = m_DroneRC.FindAction("DownUp", throwIfNotFound: true);
        m_DroneRC_BackFront = m_DroneRC.FindAction("BackFront", throwIfNotFound: true);
        m_DroneRC_LeftRightRotation = m_DroneRC.FindAction("LeftRightRotation", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DroneRC
    private readonly InputActionMap m_DroneRC;
    private List<IDroneRCActions> m_DroneRCActionsCallbackInterfaces = new List<IDroneRCActions>();
    private readonly InputAction m_DroneRC_LeftRight;
    private readonly InputAction m_DroneRC_DownUp;
    private readonly InputAction m_DroneRC_BackFront;
    private readonly InputAction m_DroneRC_LeftRightRotation;
    public struct DroneRCActions
    {
        private @XboxFourToRC m_Wrapper;
        public DroneRCActions(@XboxFourToRC wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftRight => m_Wrapper.m_DroneRC_LeftRight;
        public InputAction @DownUp => m_Wrapper.m_DroneRC_DownUp;
        public InputAction @BackFront => m_Wrapper.m_DroneRC_BackFront;
        public InputAction @LeftRightRotation => m_Wrapper.m_DroneRC_LeftRightRotation;
        public InputActionMap Get() { return m_Wrapper.m_DroneRC; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DroneRCActions set) { return set.Get(); }
        public void AddCallbacks(IDroneRCActions instance)
        {
            if (instance == null || m_Wrapper.m_DroneRCActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DroneRCActionsCallbackInterfaces.Add(instance);
            @LeftRight.started += instance.OnLeftRight;
            @LeftRight.performed += instance.OnLeftRight;
            @LeftRight.canceled += instance.OnLeftRight;
            @DownUp.started += instance.OnDownUp;
            @DownUp.performed += instance.OnDownUp;
            @DownUp.canceled += instance.OnDownUp;
            @BackFront.started += instance.OnBackFront;
            @BackFront.performed += instance.OnBackFront;
            @BackFront.canceled += instance.OnBackFront;
            @LeftRightRotation.started += instance.OnLeftRightRotation;
            @LeftRightRotation.performed += instance.OnLeftRightRotation;
            @LeftRightRotation.canceled += instance.OnLeftRightRotation;
        }

        private void UnregisterCallbacks(IDroneRCActions instance)
        {
            @LeftRight.started -= instance.OnLeftRight;
            @LeftRight.performed -= instance.OnLeftRight;
            @LeftRight.canceled -= instance.OnLeftRight;
            @DownUp.started -= instance.OnDownUp;
            @DownUp.performed -= instance.OnDownUp;
            @DownUp.canceled -= instance.OnDownUp;
            @BackFront.started -= instance.OnBackFront;
            @BackFront.performed -= instance.OnBackFront;
            @BackFront.canceled -= instance.OnBackFront;
            @LeftRightRotation.started -= instance.OnLeftRightRotation;
            @LeftRightRotation.performed -= instance.OnLeftRightRotation;
            @LeftRightRotation.canceled -= instance.OnLeftRightRotation;
        }

        public void RemoveCallbacks(IDroneRCActions instance)
        {
            if (m_Wrapper.m_DroneRCActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDroneRCActions instance)
        {
            foreach (var item in m_Wrapper.m_DroneRCActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DroneRCActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DroneRCActions @DroneRC => new DroneRCActions(this);
    public interface IDroneRCActions
    {
        void OnLeftRight(InputAction.CallbackContext context);
        void OnDownUp(InputAction.CallbackContext context);
        void OnBackFront(InputAction.CallbackContext context);
        void OnLeftRightRotation(InputAction.CallbackContext context);
    }
}
